#!/usr/bin/env bash

export HTTP_PORT=${HTTP_PORT:-80}
export MYSQL_PORT=${MYSQL_PORT:-3306}
export ASUSER=${ASUSER:-$UID}
export COMPOSE_EXEC_FLAGS=${COMPOSE_EXEC_FLAGS:-""}
export SSH_KEY_PATH=${SSH_KEY_PATH:-"$HOME/.ssh/id_rsa"}

if [ -f .env ]; then
    source .env
fi

# Is the environment running
PSRESULT="$(docker-compose ps -q)"
if [ ! -z "$PSRESULT" ]; then
    IS_RUNNING="yes"
else
    IS_RUNNING="no"
fi

# Create base docker-compose command to run
COMPOSE="docker-compose"
COMPOSE_EXEC="$COMPOSE exec $COMPOSE_EXEC_FLAGS"
NODE_RUN="docker run --rm -it \
    -v "$(pwd):/app:cached" \
    -v "${SSH_KEY_PATH}:/home/developer/.ssh/id_rsa:cached" \
    -e "ASUSER=$ASUSER" \
    fireworkweb/node:alpine"
QA_RUN="docker run --rm -it \
    -v "$(pwd):/app:cached" \
    -w "/app"
    jakzal/phpqa:alpine"

if [ $# -eq 0 ]; then
    $COMPOSE ps
    exit 0
fi

if [ "$1" == "init" ]; then
    echo "TODO: init"

# Start up containers
elif [ "$1" == "start" ]; then
    $COMPOSE up -d

# Stop the containers
elif [ "$1" == "stop" ]; then
    $COMPOSE down

# If "php" is used, pass-thru to "php"
# inside a new container
elif [ "$1" == "php" ]; then
    shift 1
    $COMPOSE_EXEC \
        -u developer \
        app \
        php "$@"

# If "art" is used, pass-thru to "artisan"
# inside a new container
elif [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
    shift 1
    $COMPOSE_EXEC \
        -u developer \
        app \
        php artisan "$@"

# If "composer" is used, pass-thru to "composer"
# inside a new container
elif [ "$1" == "composer" ] || [ "$1" == "comp" ]; then
    shift 1
    $COMPOSE_EXEC \
        -u developer \
        app \
        composer "$@"

# If "test" is used, run unit tests,
# pass-thru any extra arguments to php-unit
elif [ "$1" == "test" ]; then
    shift 1
    $COMPOSE_EXEC \
        -u developer \
        app \
        ./vendor/bin/phpunit "$@"

# If "dump" is used, run mysqldump
# from our mysql container
elif [ "$1" == "dump" ]; then
    shift 1
    if [ "$IS_RUNNING" == "yes" ]; then
        $COMPOSE_EXEC \
            mysql \
            bash -c 'MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysqldump -u root --default-character-set=utf8mb4 $MYSQL_DATABASE'
    else
        $COMPOSE run --rm \
            mysql \
            bash -c 'MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysqldump -u root --default-character-set=utf8mb4 $MYSQL_DATABASE'
    fi

# If "restore" is used, run mysql
# from our mysql container
# It expects the dump file path as the second arg
# e.g.: ./fwd restore /path/to/dump-file.ext
elif [ "$1" == "restore" ]; then
    shift 1
    LOCAL_MYSQL="$COMPOSE run --rm mysql mysql -hmysql -uroot -p$DB_PASSWORD"

    $LOCAL_MYSQL -e "drop database $DB_DATABASE"
    $LOCAL_MYSQL -e "create database $DB_DATABASE"
    $LOCAL_MYSQL -e "grant all on $DB_DATABASE.* to $DB_USERNAME@'%'"

    $COMPOSE run --rm mysql mysql -hmysql -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE < $1

# If "import" is used, run mysql
# from our mysql container
# It expects the dump file path as the second arg
# e.g.: ./fwd import /path/to/dump-file.ext
elif [ "$1" == "import" ]; then
    shift 1
    if [ "$IS_RUNNING" == "yes" ]; then
        $COMPOSE run --rm mysql mysql -hmysql -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE < $1
    else
        echo "Error: This command can only be run while a MySQL container is running mysqld (mysql server)."
        echo "This command cannot run the server and the mysql client at the same time."
    fi

# If "mysql" is used, run mysql
# from our mysql container
elif [ "$1" == "mysql" ]; then
    shift 1
    if [ "$IS_RUNNING" == "yes" ]; then
        $COMPOSE_EXEC \
            mysql \
            bash -c 'MYSQL_PWD=$MYSQL_ROOT_PASSWORD mysql -u root $MYSQL_DATABASE'
    else
        echo "Error: This command can only be run while a MySQL container is running mysqld (mysql server)."
        echo "This command cannot run the server and the mysql client at the same time."
    fi

# If "ssh" is used, pass-thru to "ssh"
# inside a new container
# e.g.: ./developer ssh app
# e.g.: ./developer ssh mysql
elif [ "$1" == "ssh" ]; then
    shift 1
    $COMPOSE_EXEC $1 bash

# Now we start some utility commands that aren't related to compose services

# If "node" is used, run node
# from our node container
elif [ "$1" == "node" ]; then
    shift 1
    $NODE_RUN node "$@"

# If "npm" is used, run npm
# from our node container
elif [ "$1" == "npm" ]; then
    shift 1
    $NODE_RUN npm "$@"

# If "yarn" is used, run yarn
# from our node container
elif [ "$1" == "yarn" ]; then
    shift 1
    $NODE_RUN yarn "$@"

# If "gulp" is used, run gulp
# from our node container
elif [ "$1" == "gulp" ]; then
    shift 1
    $NODE_RUN node ./node_modules/.bin/gulp "$@"

elif [ "$1" == "qa" ]; then
    shift 1
    $QA_RUN "$@"

elif [ "$1" == "phan" ]; then
    $QA_RUN phan --color -p -l app -iy 5

elif [ "$1" == "phpmd" ]; then
    $QA_RUN phpmd app/ text \
        phpmd/codesize.xml,phpmd/controversial.xml,phpmd/design.xml,phpmd/naming.xml,unusedcode,phpmd/cleancode.xml

elif [ "$1" == "phpmnd" ]; then
    $QA_RUN phpmnd app/ \
        --ignore-funcs=round,sleep,abort,strpad,number_format \
        --exclude=tests \
        --progress \
        --extensions=default_parameter,-return,argument

elif [ "$1" == "phpcpd" ]; then
    $QA_RUN phpcpd --fuzzy app/

# Else, pass-thru args to docker-compose
else
    $COMPOSE "$@"
fi
